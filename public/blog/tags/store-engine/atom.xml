<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Store Engine | ebdrummond]]></title>
  <link href="http://ebdrummond.com/blog/tags/store-engine/atom.xml" rel="self"/>
  <link href="http://ebdrummond.com/"/>
  <updated>2015-03-26T23:32:48-05:00</updated>
  <id>http://ebdrummond.com/</id>
  <author>
    <name><![CDATA[Erin Drummond]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Store Engine Retrospective]]></title>
    <link href="http://ebdrummond.com/2013/04/store-engine-retrospective"/>
    <updated>2013-04-05T15:01:00-05:00</updated>
    <id>http://ebdrummond.com/2013/04/store-engine-retrospective</id>
    <content type="html"><![CDATA[<p>By far, Store Engine has been the most exciting project I&rsquo;ve worked on.  It was awesome to be able to show my friends and my family an actual site that I&rsquo;d built - somehow showing them all the awesome output from a command line just doesn&rsquo;t have the same pizzazz.  Not that I didn&rsquo;t work hard on my other projects too, but I felt like I pushed myself even harder for this project and poured myself into it very aggressively.  The final product is something I&rsquo;m really proud of and I think my team made a great effort.  It really meant a lot too that we were chosen to present our project as a group demo.  It felt so good that not only did we come together and learn a ton, feel like we could all feed proud of our finished product, but that other people recognized the hard work we put in, too.</p>

<p>Having worked on a real Rails project, I think I&rsquo;m ready to make some changes to the next project I have.  First off, while we started off thinking of what a customer would need to do and thought of the pages we would need, I think we got off track from there.  Next time, I&rsquo;d really like to focus on the customer experience and let that drive the development kind of from the outside in, and try to do TDD that starts with feature testing and flows down to the model testing instead of building up the model and working to feature testing.  I also am still getting a hang of how to most effectively use MVC to the fullest and most elegant extend - I feel like I was doing a lot of work in the view or controller.  I know that&rsquo;s not the best way to do things, but any time I tried to refactor everything blew up - of course most of what needed the most refactoring was what was built in the last few days of the project, so unfortunately I didn&rsquo;t have a lot of time to spend on it since we had to push to get the project completed.  For my next project I want to start out learning how to better assign the heavy lifting to the model and have it output correctly to the view instead of doing that work elsewhere.</p>

<p>I&rsquo;m also appreciating more than ever how awesome it is to try &lsquo;stretch work&rsquo; - there were a few times during the project that I tried to tackle something that was a bit out of reach of what I already knew how to do, instead of just sticking to the easy stuff that I had already done.  Some of the time I gave it my all and tried to find answers on my own, and when I couldn&rsquo;t my more knowledgeable teammate was more than happy to step in and help me to find a solution, but I appreciated the patience the group had to let me try to find a solution.  When I was able to find a solution on my own, it wasn&rsquo;t always the best code, but it got the job done, and that&rsquo;s what learning to refactor is for!</p>

<p>I think it will depend on the makeup of our next group, but I&rsquo;d like to look into different ways of making sure everyone has a good handle on how the code works without necessarily doing everything as a big group.  Given our group makeup this time, I think that was the best way forward, but I think you can split off into pairs working on different parts of a project without sacrificing knowledge of your code base.  Given how we approached the makeup of our group, I don&rsquo;t think we were actually a lot more productive than a pair of programmers would be.  We may have picked up maybe 25% extra efficiency, but we didn&rsquo;t double our output with double the programmers involved.</p>

<p>All in all, this week was exhilarating.  Our team came together and really hammered through the home stretch of our project, and I have done more outside of class to try to connect with the community.  I went to the Women Who Code event on Wednesday and met some really cool people, some newbies like myself and some women who have been in the industry for years.  It was also great to meet people at the Thoughtbot Drinkup - I finally feel like I have enough of a handle on programming that I can carry on a real conversation, whereas just a few weeks ago everything still had a tendency to feel like Greek to me.</p>

<p>I&rsquo;ve also been thinking a lot lately on what I can do to get other women from non-tech backgrounds interested in programming.  I&rsquo;d like to volunteer for RailsBridge and talked to Desi of DevChix about that.  I wonder what else I can do to reach out to women who are intimidated by programming or think they can&rsquo;t do it - obviously the women at RailsBridge have committed to dipping their toes in the water, but I want to reach out to people who are at the place I was at a year go, when I thought my brain &lsquo;didn&rsquo;t work like that&rsquo; and that I&rsquo;d be really out of place with my background.  I&rsquo;m not sure what the best way to do that is, other than evangelizing to my friends and writing about my experience, and keeping an open door to other women who have questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Store Engine Midpoint Retrospective]]></title>
    <link href="http://ebdrummond.com/2013/03/store-engine-midpoint-retrospective"/>
    <updated>2013-03-29T10:02:00-05:00</updated>
    <id>http://ebdrummond.com/2013/03/store-engine-midpoint-retrospective</id>
    <content type="html"><![CDATA[<p>I think this week has been most interesting from the perspective of learning to work with others in new ways.  Both from the perspective of the increased emphasis on pairing and the larger groups, I feel I&rsquo;ve learned a lot.</p>

<p>To start, I&rsquo;ve gotten a lot out of the structured pairing we&rsquo;ve done.  I&rsquo;ve done pairing before, but the more structured environment is making me a better pair programmer.  If it&rsquo;s not structured, I feel like it&rsquo;s easy for one person or the other to take over, and not really do pairing.  The modified ping pong pairing has been good.  It&rsquo;s also been helpful to look at how other groups are approaching the questions of Store Engine, and take some of their awesome ideas or lessons they have learned, and incorporate them into our project.  The one trap that was easy to fall into though is discussing the project and talking about Well my group did this, and not doing enough coding, which I&rsquo;d like to avoid next time.  It&rsquo;s definitely helpful to have that conversation and I learned a ton, but I would really like to work on my core skills of coding in a pair.  I think it might almost be more helpful to not work on our actual projects but a dummy project; this way you avoid long discussions of project organization or implementation, and you&rsquo;re also not caught in an awkward point of your project that&rsquo;s difficult for someone who hasn&rsquo;t been working on it to jump into.</p>

<p>Working in a group of four has been a lot different from working in a pair for this project as well.  I knew the organization was going to be a little different and we&rsquo;d really have to make sure our communication was open to avoid duplicative work or systems that didn&rsquo;t interact together in the correct way, but it&rsquo;s also more of a challenge with project vision and meshing personalities as well - I hadn&rsquo;t really taken into account how difficult that aspect might be.  I definitely think we ended the week on a smoother note than we started it; I think after some team discussions everyone has a better appreciation that we are coming in with different skills and experience, but we&rsquo;re all a team and no one person makes decisions for everyone.  There&rsquo;s also been a deeper appreciation for, when there is a conflict in a direction we should go, having a respectful discussion of why we should go in a given direction, and coming to a consensus that way.  It might have been a little bumpy at first, but I think it&rsquo;s benefitted all of us - we&rsquo;re going to be in contact with a lot of different personalities and need to work in groups throughout our career, so it&rsquo;s great to learn how to work through that to deliver a quality project that everyone understands now.</p>

<p>In that vein, I&rsquo;ve really liked our group&rsquo;s vision from the get go that even if we&rsquo;re working more slowly than other groups, we&rsquo;re not moving on til everyone understands what&rsquo;s going on.  This has meant that we&rsquo;ve had several coding sessions where all four of us are in a conference room, hooked up to a TV.  Without question this has slowed the project down, but I would prefer that to having two people in the group not understand how a shopping cart is built and how the code works.  I don&rsquo;t know how feasible that is in the working world, but as we&rsquo;re learning, I think it&rsquo;s benefitted the group.  This seems like it&rsquo;s the trickiest part of the project though, and with this out of the way, I&rsquo;m thinking this weekend and next week we&rsquo;ll be able to get a lot of code out in pairs.</p>

<p>We still have a lot to do, but I think at the end of the day we&rsquo;ll deliver a quality project.  I&rsquo;m really excited to see this all come together and to celebrate as a team.</p>

<p>So far, Rails has been interesting.  I&rsquo;m getting over my initial shock of how much it does for you on the back end, but I still feel like we&rsquo;re not done getting acquainted.  There&rsquo;s still a lot of code I look into, and I ask Wait, where is that method coming from?, to find out Oh, that&rsquo;s a Rails thing.  So there&rsquo;s still a lot to learn, but I like the structured nature of REST, and I&rsquo;m really enjoying learning the Capybara testing.  My big complaint is that I don&rsquo;t think (correct me if I&rsquo;m wrong) there is rspec pride for Rails.  Somehow testing is just plain better when you see those fabulous little rainbow dots.</p>

<p>I also wonder how much my feelings will change when we get into the relational component of our project and the different roles of admin, regular user, and unregistered guest.  Stay tuned, but I&rsquo;m hoping this won&rsquo;t be too terrible in terms of either understanding it or implementing it.  The addition to our team of someone who is experienced with Rails and knows how the parts work has definitely been helpful though when there are questions; no one can ever say they didn&rsquo;t get a thorough explanation.</p>

<p>The biggest thing I&rsquo;m trying to absorb is how all everything works so I can extract it to different contexts.  The first few Ruby projects we worked on, I felt like I understood how everything worked in the confines of the project, but trying to apply that knowledge to something new just didn&rsquo;t translate well, which to me says I didn&rsquo;t really learn it fully.  I really want to build an amazing site for my sister, whether it&rsquo;s a project I can work on for school or something I do afterwards, and of course I want to have a firm grasp on what I&rsquo;m doing when I am employed afterward, so I&rsquo;m trying to focus on that when I&rsquo;m learning.</p>
]]></content>
  </entry>
  
</feed>
